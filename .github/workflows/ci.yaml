name: CI tests

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - "**/*.log"
      - "**/*.json"
      - "**/*.xml"
      - "**/*.png"
      - ".ai/**"
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - "**/*.log"
      - "**/*.json"
      - "**/*.xml"
      - "**/*.png"
      - ".ai/**"

jobs:
  build:
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get USERPROFILE and set CACHE_PATH
      id: set_cache_path
      shell: pwsh
      run: |
        $userProfile = [System.Environment]::GetEnvironmentVariable("USERPROFILE")
        $cachePath = Join-Path $userProfile ".nuget\packages"
        echo "CACHE_PATH=$cachePath" >> $env:GITHUB_ENV

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuget/packages
          ${{ env.CACHE_PATH }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
     
    - name: Restore NuGet packages
      run: dotnet restore simple-.net-Crypting-For-PowerBuilder.slnx

    - name: Run Tests for solution
      run: dotnet test simple-.net-Crypting-For-PowerBuilder.slnx --configuration Debug
  
  trigger-cd:
    runs-on: ubuntu-latest
    needs: build # Wait for build to complete successfully
    # Only run if this event is a main branch push and build job succeeded
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build.result == 'success'
    permissions:
      actions: write # Permission to trigger repository_dispatch
      contents: write # Permission to write repository dispatch event    
    steps:
      - name: Trigger CD workflow
        uses: actions/github-script@v7
        with:
          script: |
            // Ensure we get the correct commit SHA for this event
            let commitSha = undefined;
            if (context.payload && context.payload.head_commit && context.payload.head_commit.id) {
              commitSha = context.payload.head_commit.id;
            } else if (context.sha) {
              commitSha = context.sha;
            } else if (context.payload && context.payload.after) {
              commitSha = context.payload.after;
            }

            if (!commitSha) {
              throw new Error('Could not determine commit SHA for client_payload');
            }

            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'main-branch-push',
              client_payload: {
                target_commit_sha: commitSha
              }
            });
