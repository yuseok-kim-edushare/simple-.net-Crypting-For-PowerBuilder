name: Continuous Deployment
on:
  workflow_run:
    workflows: ["CI tests"]
    types:
      - completed
    branches: [ "main" ]

permissions:
  contents: write
  discussions: write

jobs:
  deploy:
    # Only run if CI workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-tags: true

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: nuget restore

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
    
    - name: Build solution
      run: msbuild "simple-.net-Crypting-For-PowerBuilder.sln" /p:Configuration=Release

    - name: release zip make
      run: Compress-Archive -Path "D:\a\simple-.net-Crypting-For-PowerBuilder\simple-.net-Crypting-For-PowerBuilder\bin\Release\*.dll" -DestinationPath "Release.NET 4.8.zip"
    
    - name: Get latest release version and Generate release notes
      id: get_latest_release
      run: |
        $latest_release = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest").tag_name
        Write-Output "Latest release version: $latest_release"
        Write-Output "latest_release=$latest_release" >> $env:GITHUB_ENV
        $versionParts = $latest_release.Split('.')
        $versionParts[-1] = [int]$versionParts[-1] + 1
        $newVersionString = $versionParts -join '.'
        Write-Output "new_release=$newVersionString" >> $env:GITHUB_ENV
        $releaseNotes = "## Changes in " + $latest_release + "`n"
        $releaseNotes += (git log HEAD ^$latest_release --oneline)
        $releaseNotes += (git diff HEAD ^$latest_release --compact-summary)
        $releaseNotes | Out-File -FilePath releaseNotes.txt -Encoding utf8
        $releaseNotesContent = Get-Content -Path releaseNotes.txt -Raw
        Write-Output "release_notes=$releaseNotesContent" >> $env:GITHUB_ENV
        Write-Output $releaseNotesContent
  
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: "Release.NET 4.8.zip"
        tag_name: ${{ env.new_release }}
        name: ${{ env.new_release }}

