name: Enable Auto-merge on Pull Request

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize # PR 업데이트 시에도 동작

jobs:
  automerge:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # PR에 automerge를 설정하기 위한 권한
      contents: write    # (선택 사항) 필요한 경우
      actions: write  # Add permission to trigger workflows
      checks: read # Add permission to read check status
      
    steps:
      - name: Check if this is a dependabot PR
        id: check-dependabot
        uses: actions/github-script@v7
        with:
          script: |
            const author = context.payload.pull_request.user.login;
            console.log(`PR author: ${author}`);
            
            // Only enable auto-merge for dependabot PRs
            if (author === 'dependabot[bot]') {
              console.log('This is a dependabot PR, proceeding with auto-merge setup');
              return true;
            } else {
              console.log('This is not a dependabot PR, skipping auto-merge');
              return false;
            }

      - name: Wait for CI and enable auto-merge
        if: steps.check-dependabot.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            console.log(`Waiting for CI tests and setting up auto-merge for PR #${prNumber}`);
            
            // Wait for status checks to pass
            let attempt = 0;
            const maxAttempts = 40; // Wait up to 20 minutes (40 * 30 seconds)
            
            while (attempt < maxAttempts) {
              try {
                // Get the latest PR data to check merge status
                const { data: pr } = await github.rest.pulls.get({
                  owner,
                  repo,
                  pull_number: prNumber,
                });
                
                console.log(`Attempt ${attempt + 1}: PR mergeable state: ${pr.mergeable_state}, mergeable: ${pr.mergeable}`);
                
                // Check if PR is ready to merge (all checks passed)
                if (pr.mergeable_state === 'clean' || pr.mergeable_state === 'unstable') {
                  console.log('PR is ready for merging, enabling auto-merge');
                  
                  // Enable auto-merge using GraphQL
                  await github.graphql(`
                    mutation enablePullRequestAutoMerge($pullRequestId: ID!) {
                      enablePullRequestAutoMerge(input: {pullRequestId: $pullRequestId, mergeMethod: SQUASH}) {
                        pullRequest {
                          id
                          autoMergeRequest {
                            enabledAt
                            enabledBy {
                              login
                            }
                            mergeMethod
                          }
                        }
                      }
                    }
                  `, {
                    pullRequestId: pr.node_id
                  });
                  
                  console.log('Auto-merge has been enabled for this PR.');
                  return;
                }
                
                // If checks are still pending, wait and try again
                if (pr.mergeable_state === 'pending') {
                  console.log('Checks are still pending, waiting...');
                  await new Promise(resolve => setTimeout(resolve, 30000));
                  attempt++;
                  continue;
                }
                
                // If checks failed, exit
                if (pr.mergeable_state === 'dirty' || pr.mergeable_state === 'blocked') {
                  console.log(`Cannot enable auto-merge: mergeable_state is ${pr.mergeable_state}`);
                  return;
                }
                
                await new Promise(resolve => setTimeout(resolve, 30000));
                attempt++;
              } catch (error) {
                console.log(`Error: ${error.message}`);
                await new Promise(resolve => setTimeout(resolve, 30000));
                attempt++;
              }
            }
            
            console.log('Timeout waiting for PR to become mergeable');
      
      - name: Add comment if auto-merge failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: '❌ Auto-merge could not be enabled. Please check if all required checks have passed.'
            });